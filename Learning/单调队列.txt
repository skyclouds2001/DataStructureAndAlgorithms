单调队列是一种主要用于解决滑动窗口类问题的数据结构

滑动窗口类问题：在长度为n的序列中，求每个长度为m的区间的区间最值

时间复杂度是O(n)

基本思想：维护一个双向队列（deque），遍历序列，仅当一个元素可能成为某个区间最值时才保留该元素

deque<int> Q; 	// 存储的是下标
for (int i = 0; i < n; ++i)
{
    if (!Q.empty() && i - Q.front() >= m) 		// 队列长度大于等于m的弹出队首元素{最先入队元素}
        Q.pop_front();
    while (!Q.empty() && V[Q.back()] < V[i]) 	// 把比将入队元素小的队尾元素弹出{队尾元素不再可能成为最大值}（求区间最小值把这里改成>即可）
        Q.pop_back();
    Q.push_back(i); 		// 弹入当前元素{可能该元素可能较小，但如果之后元素比该元素更小，该元素仍有可能成为最大值}
    if (i >= m - 1)
        cout << V[Q.front()] << " ";	//求最大值时队列总是单调递减的，求最小值时队列总是单调递增的
}